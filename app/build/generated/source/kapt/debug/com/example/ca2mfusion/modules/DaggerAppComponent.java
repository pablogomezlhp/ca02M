// Generated by Dagger (https://dagger.dev).
package com.example.ca2mfusion.modules;

import android.app.Application;
import com.example.ca2mfusion.FoodApplication;
import com.example.ca2mfusion.db.AppDatabase;
import com.example.ca2mfusion.repositories.OrderRepoI;
import com.example.ca2mfusion.ui.cart.CartActivity;
import com.example.ca2mfusion.ui.cart.CartActivity_MembersInjector;
import com.example.ca2mfusion.ui.main.MainActivity;
import com.example.ca2mfusion.ui.main.MainActivity_MembersInjector;
import com.example.ca2mfusion.ui.option.OptionActivity;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent.Factory> cartActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent.Factory> optionActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<OrderRepoI> provideOrderRepoProvider;

  private DaggerAppComponent(RoomModule roomModuleParam, RepoModule repoModuleParam,
      Application applicationParam) {

    initialize(roomModuleParam, repoModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(CartActivity.class, (Provider) cartActivitySubcomponentFactoryProvider).put(OptionActivity.class, (Provider) optionActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final RoomModule roomModuleParam, final RepoModule repoModuleParam,
      final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.cartActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent.Factory get() {
        return new CartActivitySubcomponentFactory();}
    };
    this.optionActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent.Factory get() {
        return new OptionActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideAppDatabaseProvider = DoubleCheck.provider(RoomModule_ProvideAppDatabaseFactory.create(roomModuleParam, applicationProvider));
    this.provideOrderRepoProvider = DoubleCheck.provider(RepoModule_ProvideOrderRepoFactory.create(repoModuleParam, provideAppDatabaseProvider));
  }

  @Override
  public void inject(FoodApplication arg0) {
    injectFoodApplication(arg0);}

  private FoodApplication injectFoodApplication(FoodApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new RoomModule(), new RepoModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilderModule_MainActivityProvider.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectOrderRepoI(instance, DaggerAppComponent.this.provideOrderRepoProvider.get());
      return instance;
    }
  }

  private final class CartActivitySubcomponentFactory implements ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent create(
        CartActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CartActivitySubcomponentImpl(arg0);
    }
  }

  private final class CartActivitySubcomponentImpl implements ActivityBuilderModule_CartActivityProvider.CartActivitySubcomponent {
    private CartActivitySubcomponentImpl(CartActivity arg0) {

    }

    @Override
    public void inject(CartActivity arg0) {
      injectCartActivity(arg0);}

    private CartActivity injectCartActivity(CartActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      CartActivity_MembersInjector.injectOrderRepoI(instance, DaggerAppComponent.this.provideOrderRepoProvider.get());
      return instance;
    }
  }

  private final class OptionActivitySubcomponentFactory implements ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent create(
        OptionActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OptionActivitySubcomponentImpl(arg0);
    }
  }

  private final class OptionActivitySubcomponentImpl implements ActivityBuilderModule_OptionActivityProvider.OptionActivitySubcomponent {
    private OptionActivitySubcomponentImpl(OptionActivity arg0) {

    }

    @Override
    public void inject(OptionActivity arg0) {
      injectOptionActivity(arg0);}

    private OptionActivity injectOptionActivity(OptionActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
